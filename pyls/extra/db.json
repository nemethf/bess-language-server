{
  "mclass": [
    {
      "arg": "ACLArg",
      "cmds": [
        {
          "arg": "ACLArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/acl.cc",
            "line": 55
          },
          "line": 65
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/acl.cc",
            "line": 60
          },
          "line": 77
        }
      ],
      "definition": {
        "file": "core/modules/acl.cc",
        "line": 42
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/acl.bess",
          "line": 49
        }
      ],
      "help": "ACL module from NetBricks",
      "line": 42,
      "name": "ACL"
    },
    {
      "arg": "ArpResponderArg",
      "cmds": [
        {
          "arg": "ArpResponderArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/arp_responder.cc",
            "line": 42
          },
          "line": 107
        }
      ],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/arp.bess",
          "line": 37
        }
      ],
      "help": "Respond to ARP requests and learns new MAC's",
      "line": 81,
      "name": "ArpResponder"
    },
    {
      "arg": "BPFArg",
      "cmds": [
        {
          "arg": "BPFArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/bpf.cc",
            "line": 73
          },
          "line": 144
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/bpf.cc",
            "line": 115
          },
          "line": 155
        }
      ],
      "definition": {
        "file": "core/modules/bpf.cc",
        "line": 57
      },
      "examples": [],
      "help": "classifies packets with pcap-filter(7) syntax",
      "line": 123,
      "name": "BPF"
    },
    {
      "arg": "BufferArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [],
      "help": "buffers packets into larger batches",
      "line": 159,
      "name": "Buffer"
    },
    {
      "arg": "BypassArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/bypass.cc",
        "line": 33
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/igate.bess",
          "line": 31
        },
        {
          "file": "bessctl/conf/samples/worker_split.bess",
          "line": 34
        }
      ],
      "help": "bypasses packets without any processing",
      "line": 183,
      "name": "Bypass"
    },
    {
      "arg": "DRRArg",
      "cmds": [
        {
          "arg": "DRRQuantumArg",
          "cmd": "set_quantum_size",
          "definition": {
            "file": "core/modules/drr.cc",
            "line": 411
          },
          "line": 234
        },
        {
          "arg": "DRRMaxFlowQueueSizeArg",
          "cmd": "set_max_flow_queue_size",
          "definition": {
            "file": "core/modules/drr.cc",
            "line": 420
          },
          "line": 242
        }
      ],
      "definition": {
        "file": "core/modules/drr.cc",
        "line": 77
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/drr.bess",
          "line": 46
        }
      ],
      "help": "Deficit Round Robin",
      "line": 207,
      "name": "DRR"
    },
    {
      "arg": "DumpArg",
      "cmds": [
        {
          "arg": "DumpArg",
          "cmd": "set_interval",
          "definition": {
            "file": "core/modules/dump.cc",
            "line": 69
          },
          "line": 274
        }
      ],
      "definition": {
        "file": "core/modules/dump.cc",
        "line": 47
      },
      "examples": [],
      "help": "Dump packet data and metadata attributes",
      "line": 253,
      "name": "Dump"
    },
    {
      "arg": "EtherEncapArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/ether_encap.cc",
        "line": 44
      },
      "examples": [],
      "help": "encapsulates packets with an Ethernet header",
      "line": 286,
      "name": "EtherEncap"
    },
    {
      "arg": "ExactMatchArg",
      "cmds": [
        {
          "arg": "EmptyArg",
          "cmd": "get_initial_arg",
          "definition": {
            "file": "core/modules/exact_match.cc",
            "line": 122
          },
          "line": 340
        },
        {
          "arg": "EmptyArg",
          "cmd": "get_runtime_config",
          "definition": {
            "file": "core/modules/exact_match.cc",
            "line": 150
          },
          "line": 343
        },
        {
          "arg": "ExactMatchConfig",
          "cmd": "set_runtime_config",
          "definition": {
            "file": "core/modules/exact_match.cc",
            "line": 211
          },
          "line": 346,
          "return": {
            "description": "ExactMatchConfig represents the current runtime configuration\nof an ExactMatch module, as returned by get_runtime_config and\nset by set_runtime_config.",
            "extensions": [],
            "fields": [
              {
                "defaultValue": "",
                "description": "",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "default_gate",
                "type": "uint64"
              },
              {
                "defaultValue": "",
                "description": "",
                "fullType": "bess.pb.ExactMatchCommandAddArg",
                "label": "repeated",
                "longType": "ExactMatchCommandAddArg",
                "name": "rules",
                "type": "ExactMatchCommandAddArg"
              }
            ],
            "fullName": "bess.pb.ExactMatchConfig",
            "hasExtensions": false,
            "hasFields": true,
            "line": 511,
            "longName": "ExactMatchConfig",
            "name": "ExactMatchConfig"
          }
        },
        {
          "arg": "ExactMatchCommandAddArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/exact_match.cc",
            "line": 274
          },
          "line": 358
        },
        {
          "arg": "ExactMatchCommandDeleteArg",
          "cmd": "delete",
          "definition": {
            "file": "core/modules/exact_match.cc",
            "line": 284
          },
          "line": 373
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/exact_match.cc",
            "line": 302
          },
          "line": 382
        },
        {
          "arg": "ExactMatchCommandSetDefaultGateArg",
          "cmd": "set_default_gate",
          "definition": {
            "file": "core/modules/exact_match.cc",
            "line": 308
          },
          "line": 385
        }
      ],
      "definition": {
        "file": "core/modules/exact_match.cc",
        "line": 93
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/exactmatch.bess",
          "line": 55
        },
        {
          "file": "bessctl/conf/samples/l2forward.bess",
          "line": 45
        }
      ],
      "help": "Multi-field classifier with an exact match table",
      "line": 310,
      "name": "ExactMatch"
    },
    {
      "arg": "FlowGenArg",
      "cmds": [
        {
          "arg": "FlowGenArg",
          "cmd": "update",
          "definition": {
            "file": "core/modules/flowgen.cc",
            "line": 318
          },
          "line": 431
        },
        {
          "arg": "FlowGenCommandSetBurstArg",
          "cmd": "set_burst",
          "definition": {
            "file": "core/modules/flowgen.cc",
            "line": 331
          },
          "line": 454
        }
      ],
      "definition": {
        "file": "core/modules/flowgen.cc",
        "line": 344
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/flowgen.bess",
          "line": 48
        },
        {
          "file": "bessctl/conf/samples/url_filter.bess",
          "line": 40
        }
      ],
      "help": "generates packets on a flow basis",
      "line": 396,
      "name": "FlowGen"
    },
    {
      "arg": "GenericDecapArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/generic_decap.cc",
        "line": 33
      },
      "examples": [],
      "help": "remove specified bytes from the beginning of packets",
      "line": 463,
      "name": "GenericDecap"
    },
    {
      "arg": "GenericEncapArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/generic_encap.cc",
        "line": 104
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/generic_encap.bess",
          "line": 45
        }
      ],
      "help": "encapsulates packets with constant values and metadata attributes",
      "line": 485,
      "name": "GenericEncap"
    },
    {
      "arg": "HashLBArg",
      "cmds": [
        {
          "arg": "HashLBCommandSetModeArg",
          "cmd": "set_mode",
          "definition": {
            "file": "core/modules/hash_lb.cc",
            "line": 74
          },
          "line": 558
        },
        {
          "arg": "HashLBCommandSetGatesArg",
          "cmd": "set_gates",
          "definition": {
            "file": "core/modules/hash_lb.cc",
            "line": 101
          },
          "line": 573
        }
      ],
      "definition": {
        "file": "core/modules/hash_lb.cc",
        "line": 118
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/hash_lb.bess",
          "line": 56
        }
      ],
      "help": "splits packets on a flow basis with L2/L3/L4 header fields",
      "line": 531,
      "name": "HashLB"
    },
    {
      "arg": "IPChecksumArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [],
      "help": "recomputes the IPv4 checksum",
      "line": 584,
      "name": "IPChecksum"
    },
    {
      "arg": "IPEncapArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/ip_encap.cc",
        "line": 50
      },
      "examples": [],
      "help": "encapsulates packets with an IPv4 header",
      "line": 590,
      "name": "IPEncap"
    },
    {
      "arg": "IPLookupArg",
      "cmds": [
        {
          "arg": "IPLookupCommandAddArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/ip_lookup.cc",
            "line": 187
          },
          "line": 640
        },
        {
          "arg": "IPLookupCommandDeleteArg",
          "cmd": "delete",
          "definition": {
            "file": "core/modules/ip_lookup.cc",
            "line": 214
          },
          "line": 653
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/ip_lookup.cc",
            "line": 235
          },
          "line": 664
        }
      ],
      "definition": {
        "file": "core/modules/ip_lookup.cc",
        "line": 56
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/iplookup.bess",
          "line": 53
        }
      ],
      "help": "performs Longest Prefix Match on IPv4 packets",
      "line": 614,
      "name": "IPLookup"
    },
    {
      "arg": "IPSwapArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/nat.bess",
          "line": 54
        }
      ],
      "help": "swaps source/destination IP addresses and L4 ports",
      "line": 668,
      "name": "IPSwap"
    },
    {
      "arg": "L2ForwardArg",
      "cmds": [
        {
          "arg": "L2ForwardCommandAddArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/l2_forward.cc",
            "line": 609
          },
          "line": 702
        },
        {
          "arg": "L2ForwardCommandDeleteArg",
          "cmd": "delete",
          "definition": {
            "file": "core/modules/l2_forward.cc",
            "line": 641
          },
          "line": 712
        },
        {
          "arg": "L2ForwardCommandSetDefaultGateArg",
          "cmd": "set_default_gate",
          "definition": {
            "file": "core/modules/l2_forward.cc",
            "line": 670
          },
          "line": 721
        },
        {
          "arg": "L2ForwardCommandLookupArg",
          "cmd": "lookup",
          "definition": {
            "file": "core/modules/l2_forward.cc",
            "line": 676
          },
          "line": 731,
          "return": {
            "description": "This message type provides the reponse to the L2Forward function `lookup(..)`.\nIt returns the gate that a requested MAC address is currently assigned to.",
            "extensions": [],
            "fields": [
              {
                "defaultValue": "",
                "description": "The gate ID that the requested MAC address maps to",
                "fullType": "uint64",
                "label": "repeated",
                "longType": "uint64",
                "name": "gates",
                "type": "uint64"
              }
            ],
            "fullName": "bess.pb.L2ForwardCommandLookupResponse",
            "hasExtensions": false,
            "hasFields": true,
            "line": 202,
            "longName": "L2ForwardCommandLookupResponse",
            "name": "L2ForwardCommandLookupResponse"
          }
        },
        {
          "arg": "L2ForwardCommandPopulateArg",
          "cmd": "populate",
          "definition": {
            "file": "core/modules/l2_forward.cc",
            "line": 708
          },
          "line": 743
        }
      ],
      "definition": {
        "file": "core/modules/l2_forward.cc",
        "line": 557
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/l2forward.bess",
          "line": 49
        }
      ],
      "help": "classifies packets with destination MAC address",
      "line": 674,
      "name": "L2Forward"
    },
    {
      "arg": "L4ChecksumArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [],
      "help": "recomputes the TCP/Ipv4 and UDP/IPv4 checksum",
      "line": 761,
      "name": "L4Checksum"
    },
    {
      "arg": "MACSwapArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/nat.bess",
          "line": 54
        }
      ],
      "help": "swaps source/destination MAC addresses",
      "line": 767,
      "name": "MACSwap"
    },
    {
      "arg": "MPLSPopArg",
      "cmds": [
        {
          "arg": "MplsPopArg",
          "cmd": "set",
          "definition": {
            "file": "core/modules/mpls_pop.cc",
            "line": 85
          },
          "line": 794
        }
      ],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/mpls_test.bess",
          "line": 23
        }
      ],
      "help": "Pop MPLS label",
      "line": 789,
      "name": "MPLSPop"
    },
    {
      "arg": "MeasureArg",
      "cmds": [
        {
          "arg": "MeasureCommandGetSummaryArg",
          "cmd": "get_summary",
          "definition": {
            "file": "core/modules/measure.cc",
            "line": 189
          },
          "line": 841,
          "return": {
            "description": "The Measure module function `get_summary()` returns the following values.\nNote that the resolution value tells you how grainy the samples are,\ne.g., 100 means that anything from 0-99 ns counts as \"0\",\nanything from 100-199 counts as \"100\", and so on.  The average\nis of samples using this graininess, but (being a result of division)\nmay not be a multiple of the resolution.",
            "extensions": [],
            "fields": [
              {
                "defaultValue": "",
                "description": "Seconds since boot.",
                "fullType": "double",
                "label": "",
                "longType": "double",
                "name": "timestamp",
                "type": "double"
              },
              {
                "defaultValue": "",
                "description": "Total # of packets seen by this module.",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "packets",
                "type": "uint64"
              },
              {
                "defaultValue": "",
                "description": "Total # of bits seen by this module.",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "bits",
                "type": "uint64"
              },
              {
                "defaultValue": "",
                "description": "",
                "fullType": "bess.pb.MeasureCommandGetSummaryResponse.Histogram",
                "label": "",
                "longType": "MeasureCommandGetSummaryResponse.Histogram",
                "name": "latency",
                "type": "Histogram"
              },
              {
                "defaultValue": "",
                "description": "",
                "fullType": "bess.pb.MeasureCommandGetSummaryResponse.Histogram",
                "label": "",
                "longType": "MeasureCommandGetSummaryResponse.Histogram",
                "name": "jitter",
                "type": "Histogram"
              }
            ],
            "fullName": "bess.pb.MeasureCommandGetSummaryResponse",
            "hasExtensions": false,
            "hasFields": true,
            "line": 245,
            "longName": "MeasureCommandGetSummaryResponse",
            "name": "MeasureCommandGetSummaryResponse"
          }
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/measure.cc",
            "line": 161
          },
          "line": 864
        }
      ],
      "definition": {
        "file": "core/modules/measure.cc",
        "line": 63
      },
      "examples": [],
      "help": "measures packet latency (paired with Timestamp module)",
      "line": 807,
      "name": "Measure"
    },
    {
      "arg": "MergeArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [],
      "help": "All input gates go out of a single output gate",
      "line": 868,
      "name": "Merge"
    },
    {
      "arg": "MetadataTestArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/mttest.cc",
        "line": 68
      },
      "examples": [],
      "help": "Dynamic metadata test module",
      "line": 890,
      "name": "MetadataTest"
    },
    {
      "arg": "NATArg",
      "cmds": [
        {
          "arg": "EmptyArg",
          "cmd": "get_initial_arg",
          "definition": {
            "file": "core/modules/nat.cc",
            "line": 115
          },
          "line": 941
        },
        {
          "arg": "EmptyArg",
          "cmd": "get_runtime_config",
          "definition": {
            "file": "core/modules/nat.cc",
            "line": 130
          },
          "line": 944
        },
        {
          "arg": "EmptyArg",
          "cmd": "set_runtime_config",
          "definition": {
            "file": "core/modules/nat.cc",
            "line": 134
          },
          "line": 947
        }
      ],
      "definition": {
        "file": "core/modules/nat.cc",
        "line": 65
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/nat.bess",
          "line": 53
        }
      ],
      "help": "Dynamic Network address/port translator",
      "line": 904,
      "name": "NAT"
    },
    {
      "arg": "NoOPArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/noop.cc",
        "line": 33
      },
      "examples": [],
      "help": "creates a task that does nothing",
      "line": 951,
      "name": "NoOP"
    },
    {
      "arg": "PortIncArg",
      "cmds": [
        {
          "arg": "PortIncCommandSetBurstArg",
          "cmd": "set_burst",
          "definition": {
            "file": "core/modules/port_inc.cc",
            "line": 155
          },
          "line": 985
        }
      ],
      "definition": {
        "file": "core/modules/port_inc.cc",
        "line": 39
      },
      "examples": [],
      "help": "receives packets from a port",
      "line": 957,
      "name": "PortInc"
    },
    {
      "arg": "PortOutArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/port_out.cc",
        "line": 34
      },
      "examples": [],
      "help": "sends pakets to a port",
      "line": 996,
      "name": "PortOut"
    },
    {
      "arg": "QueueArg",
      "cmds": [
        {
          "arg": "QueueCommandSetBurstArg",
          "cmd": "set_burst",
          "definition": {
            "file": "core/modules/queue.cc",
            "line": 204
          },
          "line": 1045
        },
        {
          "arg": "QueueCommandSetSizeArg",
          "cmd": "set_size",
          "definition": {
            "file": "core/modules/queue.cc",
            "line": 216
          },
          "line": 1055
        },
        {
          "arg": "QueueCommandGetStatusArg",
          "cmd": "get_status",
          "definition": {
            "file": "core/modules/queue.cc",
            "line": 239
          },
          "line": 1064,
          "return": {
            "description": "Modules that are queues or contain queues may contain functions\n`get_status()` that take no parameters and returns the queue occupancy and\nsize.",
            "extensions": [],
            "fields": [
              {
                "defaultValue": "",
                "description": "The number of packets currently in the queue.",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "count",
                "type": "uint64"
              },
              {
                "defaultValue": "",
                "description": "The maximum number of packets the queue can contain.",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "size",
                "type": "uint64"
              },
              {
                "defaultValue": "",
                "description": "total enqueued",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "enqueued",
                "type": "uint64"
              },
              {
                "defaultValue": "",
                "description": "total dequeued",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "dequeued",
                "type": "uint64"
              },
              {
                "defaultValue": "",
                "description": "total dropped",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "dropped",
                "type": "uint64"
              }
            ],
            "fullName": "bess.pb.QueueCommandGetStatusResponse",
            "hasExtensions": false,
            "hasFields": true,
            "line": 341,
            "longName": "QueueCommandGetStatusResponse",
            "name": "QueueCommandGetStatusResponse"
          }
        }
      ],
      "definition": {
        "file": "core/modules/queue.cc",
        "line": 89
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/qtest.bess",
          "line": 35
        },
        {
          "file": "bessctl/conf/samples/queue.bess",
          "line": 42
        }
      ],
      "help": "terminates current task and enqueue packets for new task",
      "line": 1022,
      "name": "Queue"
    },
    {
      "arg": "QueueIncArg",
      "cmds": [
        {
          "arg": "QueueIncCommandSetBurstArg",
          "cmd": "set_burst",
          "definition": {
            "file": "core/modules/queue_inc.cc",
            "line": 136
          },
          "line": 1105
        }
      ],
      "definition": {
        "file": "core/modules/queue_inc.cc",
        "line": 40
      },
      "examples": [],
      "help": "receives packets from a port via a specific queue",
      "line": 1076,
      "name": "QueueInc"
    },
    {
      "arg": "QueueOutArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/queue_out.cc",
        "line": 36
      },
      "examples": [],
      "help": "sends packets to a port via a specific queue",
      "line": 1116,
      "name": "QueueOut"
    },
    {
      "arg": "RandomSplitArg",
      "cmds": [
        {
          "arg": "RandomSplitCommandSetDroprateArg",
          "cmd": "set_droprate",
          "definition": {
            "file": "core/modules/random_split.cc",
            "line": 72
          },
          "line": 1167
        },
        {
          "arg": "RandomSplitCommandSetGatesArg",
          "cmd": "set_gates",
          "definition": {
            "file": "core/modules/random_split.cc",
            "line": 83
          },
          "line": 1176
        }
      ],
      "definition": {
        "file": "core/modules/random_split.cc",
        "line": 46
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/random_split.bess",
          "line": 42
        }
      ],
      "help": "randomly splits/drops packets",
      "line": 1145,
      "name": "RandomSplit"
    },
    {
      "arg": "RandomUpdateArg",
      "cmds": [
        {
          "arg": "RandomUpdateArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/random_update.cc",
            "line": 46
          },
          "line": 1209
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/random_update.cc",
            "line": 111
          },
          "line": 1221
        }
      ],
      "definition": {
        "file": "core/modules/random_update.cc",
        "line": 42
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/hash_lb.bess",
          "line": 55
        },
        {
          "file": "bessctl/conf/samples/l2forward.bess",
          "line": 58
        },
        {
          "file": "bessctl/conf/samples/update.bess",
          "line": 48
        }
      ],
      "help": "updates packet data with random values",
      "line": 1186,
      "name": "RandomUpdate"
    },
    {
      "arg": "ReplicateArg",
      "cmds": [
        {
          "arg": "ReplicateCommandSetGatesArg",
          "cmd": "set_gates",
          "definition": {
            "file": "core/modules/replicate.cc",
            "line": 54
          },
          "line": 1248
        }
      ],
      "definition": {
        "file": "core/modules/replicate.cc",
        "line": 37
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/replicate.bess",
          "line": 31
        }
      ],
      "help": "makes a copy of a packet and sends it out over n gates",
      "line": 1225,
      "name": "Replicate"
    },
    {
      "arg": "RewriteArg",
      "cmds": [
        {
          "arg": "RewriteArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/rewrite.cc",
            "line": 48
          },
          "line": 1283
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/rewrite.cc",
            "line": 84
          },
          "line": 1296
        }
      ],
      "definition": {
        "file": "core/modules/rewrite.cc",
        "line": 44
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/acl.bess",
          "line": 51
        },
        {
          "file": "bessctl/conf/samples/arp.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/drr.bess",
          "line": 45
        },
        {
          "file": "bessctl/conf/samples/exactmatch.bess",
          "line": 59
        },
        {
          "file": "bessctl/conf/samples/generic_encap.bess",
          "line": 44
        },
        {
          "file": "bessctl/conf/samples/hash_lb.bess",
          "line": 51
        },
        {
          "file": "bessctl/conf/samples/iplookup.bess",
          "line": 53
        },
        {
          "file": "bessctl/conf/samples/l2forward.bess",
          "line": 57
        },
        {
          "file": "bessctl/conf/samples/mpls_test.bess",
          "line": 26
        },
        {
          "file": "bessctl/conf/samples/nat.bess",
          "line": 54
        },
        {
          "file": "bessctl/conf/samples/queue.bess",
          "line": 41
        },
        {
          "file": "bessctl/conf/samples/random_split.bess",
          "line": 41
        },
        {
          "file": "bessctl/conf/samples/tc/max_burst.bess",
          "line": 38
        },
        {
          "file": "bessctl/conf/samples/update.bess",
          "line": 39
        },
        {
          "file": "bessctl/conf/samples/update_ttl.bess",
          "line": 39
        },
        {
          "file": "bessctl/conf/samples/vlantest.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/wildcardmatch.bess",
          "line": 60
        }
      ],
      "help": "replaces entire packet data",
      "line": 1258,
      "name": "Rewrite"
    },
    {
      "arg": "RoundRobinArg",
      "cmds": [
        {
          "arg": "RoundRobinCommandSetModeArg",
          "cmd": "set_mode",
          "definition": {
            "file": "core/modules/round_robin.cc",
            "line": 71
          },
          "line": 1324
        },
        {
          "arg": "RoundRobinCommandSetGatesArg",
          "cmd": "set_gates",
          "definition": {
            "file": "core/modules/round_robin.cc",
            "line": 84
          },
          "line": 1333
        }
      ],
      "definition": {
        "file": "core/modules/round_robin.cc",
        "line": 40
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/igate.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/roundrobin.bess",
          "line": 31
        },
        {
          "file": "bessctl/conf/samples/update.bess",
          "line": 39
        },
        {
          "file": "bessctl/conf/samples/update_ttl.bess",
          "line": 39
        }
      ],
      "help": "splits packets evenly with round robin",
      "line": 1300,
      "name": "RoundRobin"
    },
    {
      "arg": "SetMetadataArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/set_metadata.cc",
        "line": 180
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/generic_encap.bess",
          "line": 43
        },
        {
          "file": "bessctl/conf/samples/wildcardmatch.bess",
          "line": 60
        }
      ],
      "help": "Set metadata attributes to packets",
      "line": 1343,
      "name": "SetMetadata"
    },
    {
      "arg": "SinkArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/acl.bess",
          "line": 51
        },
        {
          "file": "bessctl/conf/samples/arp.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/drr.bess",
          "line": 46
        },
        {
          "file": "bessctl/conf/samples/exactmatch.bess",
          "line": 61
        },
        {
          "file": "bessctl/conf/samples/flowgen.bess",
          "line": 49
        },
        {
          "file": "bessctl/conf/samples/generic_encap.bess",
          "line": 49
        },
        {
          "file": "bessctl/conf/samples/hash_lb.bess",
          "line": 62
        },
        {
          "file": "bessctl/conf/samples/igate.bess",
          "line": 31
        },
        {
          "file": "bessctl/conf/samples/iplookup.bess",
          "line": 55
        },
        {
          "file": "bessctl/conf/samples/l2forward.bess",
          "line": 60
        },
        {
          "file": "bessctl/conf/samples/mpls_test.bess",
          "line": 26
        },
        {
          "file": "bessctl/conf/samples/multicore.bess",
          "line": 45
        },
        {
          "file": "bessctl/conf/samples/nat.bess",
          "line": 54
        },
        {
          "file": "bessctl/conf/samples/qtest.bess",
          "line": 36
        },
        {
          "file": "bessctl/conf/samples/queue.bess",
          "line": 44
        },
        {
          "file": "bessctl/conf/samples/random_split.bess",
          "line": 44
        },
        {
          "file": "bessctl/conf/samples/replicate.bess",
          "line": 32
        },
        {
          "file": "bessctl/conf/samples/roundrobin.bess",
          "line": 32
        },
        {
          "file": "bessctl/conf/samples/s2s.bess",
          "line": 34
        },
        {
          "file": "bessctl/conf/samples/tc/complextree.bess",
          "line": 67
        },
        {
          "file": "bessctl/conf/samples/tc/max_burst.bess",
          "line": 38
        },
        {
          "file": "bessctl/conf/samples/tc/ratelimit.bess",
          "line": 34
        },
        {
          "file": "bessctl/conf/samples/update.bess",
          "line": 44
        },
        {
          "file": "bessctl/conf/samples/update_ttl.bess",
          "line": 47
        },
        {
          "file": "bessctl/conf/samples/url_filter.bess",
          "line": 47
        },
        {
          "file": "bessctl/conf/samples/vlantest.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/wildcardmatch.bess",
          "line": 63
        },
        {
          "file": "bessctl/conf/samples/worker_split.bess",
          "line": 41
        }
      ],
      "help": "discards all packets",
      "line": 1369,
      "name": "Sink"
    },
    {
      "arg": "SourceArg",
      "cmds": [
        {
          "arg": "SourceCommandSetPktSizeArg",
          "cmd": "set_pkt_size",
          "definition": {
            "file": "core/modules/source.cc",
            "line": 74
          },
          "line": 1410
        },
        {
          "arg": "SourceCommandSetBurstArg",
          "cmd": "set_burst",
          "definition": {
            "file": "core/modules/source.cc",
            "line": 63
          },
          "line": 1419
        }
      ],
      "definition": {
        "file": "core/modules/source.cc",
        "line": 40
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/acl.bess",
          "line": 51
        },
        {
          "file": "bessctl/conf/samples/arp.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/drr.bess",
          "line": 45
        },
        {
          "file": "bessctl/conf/samples/exactmatch.bess",
          "line": 59
        },
        {
          "file": "bessctl/conf/samples/generic_encap.bess",
          "line": 42
        },
        {
          "file": "bessctl/conf/samples/hash_lb.bess",
          "line": 50
        },
        {
          "file": "bessctl/conf/samples/igate.bess",
          "line": 31
        },
        {
          "file": "bessctl/conf/samples/iplookup.bess",
          "line": 53
        },
        {
          "file": "bessctl/conf/samples/l2forward.bess",
          "line": 56
        },
        {
          "file": "bessctl/conf/samples/mpls_test.bess",
          "line": 26
        },
        {
          "file": "bessctl/conf/samples/multicore.bess",
          "line": 46
        },
        {
          "file": "bessctl/conf/samples/nat.bess",
          "line": 54
        },
        {
          "file": "bessctl/conf/samples/qtest.bess",
          "line": 33
        },
        {
          "file": "bessctl/conf/samples/queue.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/random_split.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/replicate.bess",
          "line": 31
        },
        {
          "file": "bessctl/conf/samples/roundrobin.bess",
          "line": 31
        },
        {
          "file": "bessctl/conf/samples/s2s.bess",
          "line": 34
        },
        {
          "file": "bessctl/conf/samples/tc/complextree.bess",
          "line": 67
        },
        {
          "file": "bessctl/conf/samples/tc/max_burst.bess",
          "line": 38
        },
        {
          "file": "bessctl/conf/samples/tc/ratelimit.bess",
          "line": 34
        },
        {
          "file": "bessctl/conf/samples/update.bess",
          "line": 39
        },
        {
          "file": "bessctl/conf/samples/update_ttl.bess",
          "line": 39
        },
        {
          "file": "bessctl/conf/samples/vlantest.bess",
          "line": 40
        },
        {
          "file": "bessctl/conf/samples/wildcardmatch.bess",
          "line": 60
        },
        {
          "file": "bessctl/conf/samples/worker_split.bess",
          "line": 35
        }
      ],
      "help": "infinitely generates packets with uninitialized data",
      "line": 1389,
      "name": "Source"
    },
    {
      "arg": "SplitArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/split.cc",
        "line": 36
      },
      "examples": [],
      "help": "split packets depending on packet data or metadata attributes",
      "line": 1430,
      "name": "Split"
    },
    {
      "arg": "StaticNATArg",
      "cmds": [
        {
          "arg": "EmptyArg",
          "cmd": "get_initial_arg",
          "definition": {
            "file": "core/modules/static_nat.cc",
            "line": 92
          },
          "line": 1503
        },
        {
          "arg": "EmptyArg",
          "cmd": "get_runtime_config",
          "definition": {
            "file": "core/modules/static_nat.cc",
            "line": 111
          },
          "line": 1506
        },
        {
          "arg": "EmptyArg",
          "cmd": "set_runtime_config",
          "definition": {
            "file": "core/modules/static_nat.cc",
            "line": 115
          },
          "line": 1509
        }
      ],
      "definition": {
        "file": "core/modules/static_nat.cc",
        "line": 46
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/nat.bess",
          "line": 57
        }
      ],
      "help": "Static network address translator",
      "line": 1458,
      "name": "StaticNAT"
    },
    {
      "arg": "TimestampArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/timestamp.cc",
        "line": 64
      },
      "examples": [],
      "help": "marks current time to packets (paired with Measure module)",
      "line": 1513,
      "name": "Timestamp"
    },
    {
      "arg": "UpdateArg",
      "cmds": [
        {
          "arg": "UpdateArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/update.cc",
            "line": 68
          },
          "line": 1560
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/update.cc",
            "line": 106
          },
          "line": 1571
        }
      ],
      "definition": {
        "file": "core/modules/update.cc",
        "line": 42
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/update.bess",
          "line": 43
        }
      ],
      "help": "updates packet data with specified values",
      "line": 1539,
      "name": "Update"
    },
    {
      "arg": "UpdateTTLArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/update_ttl.bess",
          "line": 46
        }
      ],
      "help": "decreases the IP TTL field by 1",
      "line": 1575,
      "name": "UpdateTTL"
    },
    {
      "arg": "UrlFilterArg",
      "cmds": [
        {
          "arg": "EmptyArg",
          "cmd": "get_initial_arg",
          "definition": {
            "file": "core/modules/url_filter.cc",
            "line": 195
          },
          "line": 1610
        },
        {
          "arg": "EmptyArg",
          "cmd": "get_runtime_config",
          "definition": {
            "file": "core/modules/url_filter.cc",
            "line": 203
          },
          "line": 1613
        },
        {
          "arg": "UrlFilterConfig",
          "cmd": "set_runtime_config",
          "definition": {
            "file": "core/modules/url_filter.cc",
            "line": 228
          },
          "line": 1616,
          "return": {
            "description": "The runtime configuration of a URLFilter is the current\nblacklist.  This means that getting the Arg gets an *empty*\nlist: we assume anyone using get_initial_arg is also using\nget_runtime_config.",
            "extensions": [],
            "fields": [
              {
                "defaultValue": "",
                "description": "",
                "fullType": "bess.pb.UrlFilterArg.Url",
                "label": "repeated",
                "longType": "UrlFilterArg.Url",
                "name": "blacklist",
                "type": "Url"
              }
            ],
            "fullName": "bess.pb.UrlFilterConfig",
            "hasExtensions": false,
            "hasFields": true,
            "line": 1059,
            "longName": "UrlFilterConfig",
            "name": "UrlFilterConfig"
          }
        },
        {
          "arg": "UrlFilterArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/url_filter.cc",
            "line": 183
          },
          "line": 1630
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/url_filter.cc",
            "line": 188
          },
          "line": 1645
        }
      ],
      "definition": {
        "file": "core/modules/url_filter.cc",
        "line": 176
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/url_filter.bess",
          "line": 44
        }
      ],
      "help": "Filter HTTP connection",
      "line": 1581,
      "name": "UrlFilter"
    },
    {
      "arg": "VLANPopArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/vlantest.bess",
          "line": 40
        }
      ],
      "help": "removes 802.1Q/802.11ad VLAN tag",
      "line": 1649,
      "name": "VLANPop"
    },
    {
      "arg": "VLANPushArg",
      "cmds": [
        {
          "arg": "VLANPushArg",
          "cmd": "set_tci",
          "definition": {
            "file": "core/modules/vlan_push.cc",
            "line": 52
          },
          "line": 1690
        }
      ],
      "definition": {
        "file": "core/modules/vlan_push.cc",
        "line": 48
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/queue.bess",
          "line": 43
        },
        {
          "file": "bessctl/conf/samples/vlantest.bess",
          "line": 40
        }
      ],
      "help": "adds 802.1Q/802.11ad VLAN tag",
      "line": 1669,
      "name": "VLANPush"
    },
    {
      "arg": "VLANSplitArg",
      "cmds": [],
      "definition": {
        "file": "core/module.cc",
        "line": 131
      },
      "examples": [],
      "help": "split packets depending on their VID",
      "line": 1702,
      "name": "VLANSplit"
    },
    {
      "arg": "VXLANDecapArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/vxlan_decap.cc",
        "line": 48
      },
      "examples": [],
      "help": "decapsulates the outer Ethetnet/IP/UDP/VXLAN headers",
      "line": 1722,
      "name": "VXLANDecap"
    },
    {
      "arg": "VXLANEncapArg",
      "cmds": [],
      "definition": {
        "file": "core/modules/vxlan_encap.cc",
        "line": 56
      },
      "examples": [],
      "help": "encapsulates packets with UDP/VXLAN headers",
      "line": 1742,
      "name": "VXLANEncap"
    },
    {
      "arg": "WildcardMatchArg",
      "cmds": [
        {
          "arg": "EmptyArg",
          "cmd": "get_initial_arg",
          "definition": {
            "file": "core/modules/wildcard_match.cc",
            "line": 391
          },
          "line": 1793
        },
        {
          "arg": "EmptyArg",
          "cmd": "get_runtime_config",
          "definition": {
            "file": "core/modules/wildcard_match.cc",
            "line": 407
          },
          "line": 1796
        },
        {
          "arg": "WildcardMatchConfig",
          "cmd": "set_runtime_config",
          "definition": {
            "file": "core/modules/wildcard_match.cc",
            "line": 471
          },
          "line": 1799,
          "return": {
            "description": "WildcardMatchConfig represents the current runtime configuration\nof a WildcardMatch module, as returned by get_runtime_config and\nset by set_runtime_config.",
            "extensions": [],
            "fields": [
              {
                "defaultValue": "",
                "description": "",
                "fullType": "uint64",
                "label": "",
                "longType": "uint64",
                "name": "default_gate",
                "type": "uint64"
              },
              {
                "defaultValue": "",
                "description": "",
                "fullType": "bess.pb.WildcardMatchCommandAddArg",
                "label": "repeated",
                "longType": "WildcardMatchCommandAddArg",
                "name": "rules",
                "type": "WildcardMatchCommandAddArg"
              }
            ],
            "fullName": "bess.pb.WildcardMatchConfig",
            "hasExtensions": false,
            "hasFields": true,
            "line": 1129,
            "longName": "WildcardMatchConfig",
            "name": "WildcardMatchConfig"
          }
        },
        {
          "arg": "WildcardMatchCommandAddArg",
          "cmd": "add",
          "definition": {
            "file": "core/modules/wildcard_match.cc",
            "line": 318
          },
          "line": 1811
        },
        {
          "arg": "WildcardMatchCommandDeleteArg",
          "cmd": "delete",
          "definition": {
            "file": "core/modules/wildcard_match.cc",
            "line": 357
          },
          "line": 1824
        },
        {
          "arg": "EmptyArg",
          "cmd": "clear",
          "definition": {
            "file": "core/modules/wildcard_match.cc",
            "line": 384
          },
          "line": 1833
        },
        {
          "arg": "WildcardMatchCommandSetDefaultGateArg",
          "cmd": "set_default_gate",
          "definition": {
            "file": "core/modules/wildcard_match.cc",
            "line": 462
          },
          "line": 1836
        }
      ],
      "definition": {
        "file": "core/modules/wildcard_match.cc",
        "line": 111
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/wildcardmatch.bess",
          "line": 55
        }
      ],
      "help": "Multi-field classifier with a wildcard match table",
      "line": 1764,
      "name": "WildcardMatch"
    },
    {
      "arg": "WorkerSplitArg",
      "cmds": [
        {
          "arg": "WorkerSplitArg",
          "cmd": "reset",
          "definition": {
            "file": "core/modules/worker_split.cc",
            "line": 41
          },
          "line": 1883
        }
      ],
      "definition": {
        "file": "core/modules/worker_split.cc",
        "line": 37
      },
      "examples": [
        {
          "file": "bessctl/conf/samples/worker_split.bess",
          "line": 40
        }
      ],
      "help": "send packets to output gate X, the id of current worker",
      "line": 1844,
      "name": "WorkerSplit"
    }
  ],
  "msg": {
    "ACLArg": {
      "description": "The module ACL creates an access control module which by default blocks all traffic, unless it contains a rule which specifies otherwise.\nExamples of ACL can be found in [acl.bess](https://github.com/NetSys/bess/blob/master/bessctl/conf/samples/acl.bess)\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of ACL rules.",
          "fullType": "bess.pb.ACLArg.Rule",
          "label": "repeated",
          "longType": "ACLArg.Rule",
          "name": "rules",
          "type": "Rule"
        }
      ],
      "fullName": "bess.pb.ACLArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 412,
      "longName": "ACLArg",
      "name": "ACLArg"
    },
    "AddressRange": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "first IP address to use",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "start",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "last IP address to use",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "end",
          "type": "string"
        }
      ],
      "fullName": "bess.pb.StaticNATArg.AddressRange",
      "hasExtensions": false,
      "hasFields": true,
      "line": 727,
      "longName": "StaticNATArg.AddressRange",
      "name": "AddressRange"
    },
    "AddressRangePair": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.StaticNATArg.AddressRange",
          "label": "",
          "longType": "StaticNATArg.AddressRange",
          "name": "int_range",
          "type": "AddressRange"
        },
        {
          "defaultValue": "",
          "description": "should be the same size as int_range",
          "fullType": "bess.pb.StaticNATArg.AddressRange",
          "label": "",
          "longType": "StaticNATArg.AddressRange",
          "name": "ext_range",
          "type": "AddressRange"
        }
      ],
      "fullName": "bess.pb.StaticNATArg.AddressRangePair",
      "hasExtensions": false,
      "hasFields": true,
      "line": 732,
      "longName": "StaticNATArg.AddressRangePair",
      "name": "AddressRangePair"
    },
    "ArpResponderArg": {
      "description": "The ARP Responder module is responding to ARP requests\nTODO: Dynamic learn new MAC's-IP's mapping\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "One ARP IP-MAC mapping\n\nThe IP",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "ip",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "The MAC address",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "mac_addr",
          "type": "string"
        }
      ],
      "fullName": "bess.pb.ArpResponderArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1141,
      "longName": "ArpResponderArg",
      "name": "ArpResponderArg"
    },
    "Attribute": {
      "description": "SetMetadata Attribute describes a metadata attribute and value to attach to every packet.\nIf copying data from a packet buffer, SetMetadata can also logically shift\nthen mask the value before storing it as metadata, i.e.,\nmetadata_value = (packet_value >> `rshift_bits`) & `mask`.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The metadata attribute name.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "The size of values stored in this attribute in bytes.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "size",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "An integer value to store in the packet (host-order).",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "value_int",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "A binary value to store in the packet (host-order).",
          "fullType": "bytes",
          "label": "",
          "longType": "bytes",
          "name": "value_bin",
          "type": "bytes"
        },
        {
          "defaultValue": "",
          "description": "An index in the packet data to store copy into the metadata attribute.",
          "fullType": "int32",
          "label": "",
          "longType": "int32",
          "name": "offset",
          "type": "int32"
        },
        {
          "defaultValue": "",
          "description": "An array of bit masks to apply to each of the bytes copied starting from `offset`. If empty, the mask `[0xFF,....,0xFF]` will be used.",
          "fullType": "bytes",
          "label": "",
          "longType": "bytes",
          "name": "mask",
          "type": "bytes"
        },
        {
          "defaultValue": "",
          "description": "The number of bits to shift the value at `offset` by before masking. Must be a multiple of 8. Positive and negative values represent right and left shifts respectively.",
          "fullType": "int32",
          "label": "",
          "longType": "int32",
          "name": "rshift_bits",
          "type": "int32"
        }
      ],
      "fullName": "bess.pb.SetMetadataArg.Attribute",
      "hasExtensions": false,
      "hasFields": true,
      "line": 935,
      "longName": "SetMetadataArg.Attribute",
      "name": "Attribute"
    },
    "BPFArg": {
      "description": "The BPF module is an access control module that sends packets out on a particular gate based on whether they match a BPF filter.\n\n__Input Gates__: 1\n__Output Gates__: many (configurable)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The BPF initialized function takes a list of BPF filters.",
          "fullType": "bess.pb.BPFArg.Filter",
          "label": "repeated",
          "longType": "BPFArg.Filter",
          "name": "filters",
          "type": "Filter"
        }
      ],
      "fullName": "bess.pb.BPFArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 433,
      "longName": "BPFArg",
      "name": "BPFArg"
    },
    "BPFCommandClearArg": {
      "description": "The BPF module has a command `clear()` that takes no parameters.\nThis command removes all filters from the module.",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.BPFCommandClearArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 57,
      "longName": "BPFCommandClearArg",
      "name": "BPFCommandClearArg"
    },
    "BufferArg": {
      "description": "The Buffer module takes no parameters to initialize (ie, `Buffer()` is sufficient to create one).\nBuffer accepts packets and stores them; it may forward them to the next module only after it has\nreceived enough packets to fill an entire PacketBatch.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.BufferArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 453,
      "longName": "BufferArg",
      "name": "BufferArg"
    },
    "BypassArg": {
      "description": "The Bypass module forwards packets by emulating pre-defined packet processing overhead.\nIt burns cpu cycles per_batch, per_packet, and per-bytes.\nBypass is useful primarily for testing and performance evaluation.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "cycles_per_batch",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "cycles_per_packet",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "cycles_per_byte",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.BypassArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 464,
      "longName": "BypassArg",
      "name": "BypassArg"
    },
    "DRRArg": {
      "description": "The Module DRR provides fair scheduling of flows based on a quantum which is\nnumber of bytes allocated to each flow on each round of going through all flows.\nExamples can be found [./bessctl/conf/samples/drr.bess]\n\n__Input_Gates__: 1\n__Output_Gates__:  1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Number of flows to handle in module",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "num_flows",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "the number of bytes to allocate to each on every round",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "quantum",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "the max size that any Flows queue can get",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "max_flow_queue_size",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.DRRArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 273,
      "longName": "DRRArg",
      "name": "DRRArg"
    },
    "DRRMaxFlowQueueSizeArg": {
      "description": "The SetMaxQueueSize function sets a new maximum flow queue size for DRR module.\nIf the flow's queue gets to this size, the module starts dropping packets to\nthat flow until the queue is below this size.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "the max size that any Flows queue can get",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "max_queue_size",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.DRRMaxFlowQueueSizeArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 291,
      "longName": "DRRMaxFlowQueueSizeArg",
      "name": "DRRMaxFlowQueueSizeArg"
    },
    "DRRQuantumArg": {
      "description": "the SetQuantumSize function sets a new quantum for DRR module to operate on.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "the number of bytes to allocate to each on every round",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "quantum",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.DRRQuantumArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 282,
      "longName": "DRRQuantumArg",
      "name": "DRRQuantumArg"
    },
    "DumpArg": {
      "description": "The Dump module blindly forwards packets without modifying them. It periodically samples a packet and prints out out to the BESS log (by default stored in `/tmp/bessd.INFO`).\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "How frequently to sample and print a packet, in seconds.",
          "fullType": "double",
          "label": "",
          "longType": "double",
          "name": "interval",
          "type": "double"
        }
      ],
      "fullName": "bess.pb.DumpArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 476,
      "longName": "DumpArg",
      "name": "DumpArg"
    },
    "EmptyArg": {
      "description": "",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.EmptyArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 50,
      "longName": "EmptyArg",
      "name": "EmptyArg"
    },
    "EncapField": {
      "description": "An EncapField represents one field in the new packet header.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The length of the field.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "size",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "The metadata attribute name to pull the field value from",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "attribute",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "Or, the fixed value to insert into the packet.",
          "fullType": "bess.pb.FieldData",
          "label": "",
          "longType": "FieldData",
          "name": "value",
          "type": "FieldData"
        }
      ],
      "fullName": "bess.pb.GenericEncapArg.EncapField",
      "hasExtensions": false,
      "hasFields": true,
      "line": 571,
      "longName": "GenericEncapArg.EncapField",
      "name": "EncapField"
    },
    "Entry": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The MAC address to match",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "addr",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "Which gate to send out traffic matching this address.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "gate",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.L2ForwardCommandAddArg.Entry",
      "hasExtensions": false,
      "hasFields": true,
      "line": 166,
      "longName": "L2ForwardCommandAddArg.Entry",
      "name": "Entry"
    },
    "EtherEncapArg": {
      "description": "The EtherEncap module wraps packets in an Ethernet header, but it takes no parameters. Instead, Ethernet source, destination, and type are pulled from a packet's metadata attributes.\nFor example: `SetMetadata('dst_mac', 11:22:33:44:55) -> EtherEncap()`\nThis is useful when upstream modules wish to assign a MAC address to a packet, e.g., due to an ARP request.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.EtherEncapArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 488,
      "longName": "EtherEncapArg",
      "name": "EtherEncapArg"
    },
    "ExactMatchArg": {
      "description": "The ExactMatch module splits packets along output gates according to exact match values in arbitrary packet fields.\nTo instantiate an ExactMatch module, you must specify which fields in the packet to match over. You can add rules using the function `ExactMatch.add(...)`\nFields may be stored either in the packet data or its metadata attributes.\nAn example script using the ExactMatch code is found\nin [`bess/bessctl/conf/samples/exactmatch.bess`](https://github.com/NetSys/bess/blob/master/bessctl/conf/samples/exactmatch.bess).\n\n__Input Gates__: 1\n__Output Gates__: many (configurable)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of ExactMatch Fields",
          "fullType": "bess.pb.Field",
          "label": "repeated",
          "longType": "Field",
          "name": "fields",
          "type": "Field"
        },
        {
          "defaultValue": "",
          "description": "mask(i) corresponds to the mask for field(i)",
          "fullType": "bess.pb.FieldData",
          "label": "repeated",
          "longType": "FieldData",
          "name": "masks",
          "type": "FieldData"
        }
      ],
      "fullName": "bess.pb.ExactMatchArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 501,
      "longName": "ExactMatchArg",
      "name": "ExactMatchArg"
    },
    "ExactMatchCommandAddArg": {
      "description": "The ExactMatch module has a command `add(...)` that takes two parameters.\nThe ExactMatch initializer specifies what fields in a packet to inspect; add() specifies\nwhich values to check for over these fields.\nadd() inserts a new rule into the ExactMatch module such that traffic matching\nthat bytestring will be forwarded\nout a specified gate.\nExample use: `add(fields=[aton('12.3.4.5'), aton('5.4.3.2')], gate=2)`",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The gate to forward out packets that mach this rule.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "gate",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "The exact match values to check for",
          "fullType": "bess.pb.FieldData",
          "label": "repeated",
          "longType": "FieldData",
          "name": "fields",
          "type": "FieldData"
        }
      ],
      "fullName": "bess.pb.ExactMatchCommandAddArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 69,
      "longName": "ExactMatchCommandAddArg",
      "name": "ExactMatchCommandAddArg"
    },
    "ExactMatchCommandClearArg": {
      "description": "The ExactMatch module has a command `clear()` which takes no parameters.\nThis command removes all rules from the ExactMatch module.",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.ExactMatchCommandClearArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 86,
      "longName": "ExactMatchCommandClearArg",
      "name": "ExactMatchCommandClearArg"
    },
    "ExactMatchCommandDeleteArg": {
      "description": "The ExactMatch module has a command `delete(...)` which deletes an existing rule.\nExample use: `delete(fields=[aton('12.3.4.5'), aton('5.4.3.2')])`",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The field values for the rule to be deleted.",
          "fullType": "bess.pb.FieldData",
          "label": "repeated",
          "longType": "FieldData",
          "name": "fields",
          "type": "FieldData"
        }
      ],
      "fullName": "bess.pb.ExactMatchCommandDeleteArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 78,
      "longName": "ExactMatchCommandDeleteArg",
      "name": "ExactMatchCommandDeleteArg"
    },
    "ExactMatchCommandSetDefaultGateArg": {
      "description": "The ExactMatch module has a command `set_default_gate(...)` which takes one parameter.\nThis command routes all traffic which does _not_ match a rule to a specified gate.\nExample use in bessctl: `setDefaultGate(gate=2)`",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The gate number to send the default traffic out.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "gate",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.ExactMatchCommandSetDefaultGateArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 94,
      "longName": "ExactMatchCommandSetDefaultGateArg",
      "name": "ExactMatchCommandSetDefaultGateArg"
    },
    "ExactMatchConfig": {
      "description": "ExactMatchConfig represents the current runtime configuration\nof an ExactMatch module, as returned by get_runtime_config and\nset by set_runtime_config.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "default_gate",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.ExactMatchCommandAddArg",
          "label": "repeated",
          "longType": "ExactMatchCommandAddArg",
          "name": "rules",
          "type": "ExactMatchCommandAddArg"
        }
      ],
      "fullName": "bess.pb.ExactMatchConfig",
      "hasExtensions": false,
      "hasFields": true,
      "line": 511,
      "longName": "ExactMatchConfig",
      "name": "ExactMatchConfig"
    },
    "ExternalAddress": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "ext_addr",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.NATArg.PortRange",
          "label": "repeated",
          "longType": "NATArg.PortRange",
          "name": "port_ranges",
          "type": "PortRange"
        }
      ],
      "fullName": "bess.pb.NATArg.ExternalAddress",
      "hasExtensions": false,
      "hasFields": true,
      "line": 700,
      "longName": "NATArg.ExternalAddress",
      "name": "ExternalAddress"
    },
    "Field": {
      "description": "Update Field describes where in a packet's data to rewrite, and with what value.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The offset in the packet in bytes to rewrite at.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "offset",
          "type": "int64"
        },
        {
          "defaultValue": "",
          "description": "The number of bytes to rewrite (max 8 bytes).",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "size",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "The value to write into the packet, max 8 bytes.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "value",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.UpdateArg.Field",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1024,
      "longName": "UpdateArg.Field",
      "name": "Field"
    },
    "Filter": {
      "description": "One BPF filter is represented by the following 3-tuple.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The priority level for this rule. If a packet matches multiple rules, it will be forwarded out the gate with the highest priority. If a packet matches multiple rules with the same priority, the behavior is undefined.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "priority",
          "type": "int64"
        },
        {
          "defaultValue": "",
          "description": "The actual BPF string.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "filter",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "What gate to forward packets that match this BPF to.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "gate",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.BPFArg.Filter",
      "hasExtensions": false,
      "hasFields": true,
      "line": 437,
      "longName": "BPFArg.Filter",
      "name": "Filter"
    },
    "FlowGenArg": {
      "description": "The FlowGen module generates simulated TCP flows of packets with correct SYN/FIN flags and sequence numbers.\nThis module is useful for testing, e.g., a NAT module or other flow-aware code.\nPackets are generated off a base, \"template\" packet by modifying the IP src/dst and TCP src/dst. By default, only the ports are changed and will be modified by incrementing the template ports by up to 20000 more than the template values.\n\n__Input Gates__: 0\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The packet \"template\". All data packets are derived from this template and contain the same payload.",
          "fullType": "bytes",
          "label": "",
          "longType": "bytes",
          "name": "template",
          "type": "bytes"
        },
        {
          "defaultValue": "",
          "description": "The total number of packets per second to generate.",
          "fullType": "double",
          "label": "",
          "longType": "double",
          "name": "pps",
          "type": "double"
        },
        {
          "defaultValue": "",
          "description": "The number of new flows to create every second. flow_rate must be <= pps.",
          "fullType": "double",
          "label": "",
          "longType": "double",
          "name": "flow_rate",
          "type": "double"
        },
        {
          "defaultValue": "",
          "description": "The lifetime of a flow in seconds.",
          "fullType": "double",
          "label": "",
          "longType": "double",
          "name": "flow_duration",
          "type": "double"
        },
        {
          "defaultValue": "",
          "description": "The packet arrival distribution -- must be either \"uniform\" or \"exponential\"",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "arrival",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "The flow duration distribution -- must be either \"uniform\" or \"pareto\"",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "duration",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "Whether or not to populate the flowgenerator with initial flows (start generating full pps rate immediately) or to wait for new flows to be generated naturally (all flows have a SYN packet).",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "quick_rampup",
          "type": "bool"
        },
        {
          "defaultValue": "",
          "description": "When generating new flows, FlowGen modifies the template packet by changing the IP src, incrementing it by at most ip_src_range (e.g., if the base packet is 10.0.0.1 and range is 5, it will generate packets with IPs 10.0.0.1-10.0.0.6).",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "ip_src_range",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "When generating new flows, FlowGen modifies the template packet by changing the IP dst, incrementing it by at most ip_dst_range.",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "ip_dst_range",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "When generating new flows, FlowGen modifies the template packet by changing the TCP port, incrementing it by at most port_src_range.",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "port_src_range",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "When generating new flows, FlowGen modifies the template packet by changing the TCP dst port, incrementing it by at most port_dst_range.",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "port_dst_range",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.FlowGenArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 524,
      "longName": "FlowGenArg",
      "name": "FlowGenArg"
    },
    "FlowGenCommandSetBurstArg": {
      "description": "The FlowGen module has a command `set_burst(...)` that allows you to specify\nthe maximum number of packets to be stored in a single PacketBatch released\nby the module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "burst",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.FlowGenCommandSetBurstArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 103,
      "longName": "FlowGenCommandSetBurstArg",
      "name": "FlowGenCommandSetBurstArg"
    },
    "GenericDecapArg": {
      "description": "The GenericDecap module strips off the first few bytes of data from a packet.\n\n__Input Gates__: 1\n__Ouptut Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The number of bytes to strip off.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "bytes",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.GenericDecapArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 544,
      "longName": "GenericDecapArg",
      "name": "GenericDecapArg"
    },
    "GenericEncapArg": {
      "description": "The GenericEncap module adds a header to packets passing through it.\nTakes a list of fields. Each field is either:\n\n 1. {'size': X, 'value': Y}          (for constant values)\n 2. {'size': X, 'attribute': Y}      (for metadata attributes)\n\ne.g.: `GenericEncap([{'size': 4, 'value': 0xdeadbeef},\n                     {'size': 2, 'attribute': 'foo'},\n                     {'size': 2, 'value': 0x1234}])`\nwill prepend a 8-byte header:\n   `de ad be ef <xx> <xx> 12 34`\nwhere the 2-byte `<xx> <xx>` comes from the value of metadata attribute `'foo'`\nfor each packet.\nAn example script using GenericEncap is in [`bess/bessctl/conf/samples/generic_encap.bess`](https://github.com/NetSys/bess/blob/master/bessctl/conf/samples/generic_encap.bess).\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.GenericEncapArg.EncapField",
          "label": "repeated",
          "longType": "GenericEncapArg.EncapField",
          "name": "fields",
          "type": "EncapField"
        }
      ],
      "fullName": "bess.pb.GenericEncapArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 567,
      "longName": "GenericEncapArg",
      "name": "GenericEncapArg"
    },
    "HashLBArg": {
      "description": "The HashLB module partitions packets between output gates according to either\na hash over their MAC src/dst (`mode='l2'`), their IP src/dst (`mode='l3'`), the full\nIP/TCP 5-tuple (`mode='l4'`), or the N-tuple defined by `fields`.\n\n__Input Gates__: 1\n__Output Gates__: many (configurable)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of gate numbers over which to partition packets",
          "fullType": "int64",
          "label": "repeated",
          "longType": "int64",
          "name": "gates",
          "type": "int64"
        },
        {
          "defaultValue": "",
          "description": "The mode (`'l2'`, `'l3'`, or `'l4'`) for the hash function.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "mode",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "A list of fields that define a custom tuple.",
          "fullType": "bess.pb.Field",
          "label": "repeated",
          "longType": "Field",
          "name": "fields",
          "type": "Field"
        }
      ],
      "fullName": "bess.pb.HashLBArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 589,
      "longName": "HashLBArg",
      "name": "HashLBArg"
    },
    "HashLBCommandSetGatesArg": {
      "description": "The HashLB module has a command `set_gates(...)` which takes one parameter.\nThis function takes in a list of gate numbers to send hashed traffic out over.\nExample use in bessctl: `lb.setGates(gates=[0,1,2,3])`",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of gate numbers to load balance traffic over",
          "fullType": "int64",
          "label": "repeated",
          "longType": "int64",
          "name": "gates",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.HashLBCommandSetGatesArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 126,
      "longName": "HashLBCommandSetGatesArg",
      "name": "HashLBCommandSetGatesArg"
    },
    "HashLBCommandSetModeArg": {
      "description": "The HashLB module has a command `set_mode(...)` which takes two parameters.\nThe `mode` parameter specifies whether the load balancer will hash over the\nsrc/dest ethernet header (`'l2'`), over the src/dest IP addresses (`'l3'`), or over\nthe flow 5-tuple (`'l4'`).  Alternatively, if the `fields` parameter is set, the\nload balancer will hash over the N-tuple with the specified offsets and\nsizes.\nExample use in bessctl: `lb.set_mode('l2')`",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "What fields to hash over, `'l2'`, `'l3'`, and `'l4'` are only valid values.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "mode",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "A list of fields that define a custom tuple.",
          "fullType": "bess.pb.Field",
          "label": "repeated",
          "longType": "Field",
          "name": "fields",
          "type": "Field"
        }
      ],
      "fullName": "bess.pb.HashLBCommandSetModeArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 116,
      "longName": "HashLBCommandSetModeArg",
      "name": "HashLBCommandSetModeArg"
    },
    "Histogram": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Total # of measured data points, including above_range",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "count",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "# of data points for the \"too large value\" bucket",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "above_range",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "resolution of measured data",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "resolution_ns",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "min_ns",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "avg_ns",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "max_ns",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "total_ns",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "repeated",
          "longType": "uint64",
          "name": "percentile_values_ns",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.MeasureCommandGetSummaryResponse.Histogram",
      "hasExtensions": false,
      "hasFields": true,
      "line": 246,
      "longName": "MeasureCommandGetSummaryResponse.Histogram",
      "name": "Histogram"
    },
    "IPEncapArg": {
      "description": "Encapsulates a packet with an IP header, where IP src, dst, and proto are filled in\nby metadata values carried with the packet. Metadata attributes must include:\nip_src, ip_dst, ip_proto, ip_nexthop, and ether_type.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.IPEncapArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 603,
      "longName": "IPEncapArg",
      "name": "IPEncapArg"
    },
    "IPLookupArg": {
      "description": "An IPLookup module perfroms LPM lookups over a packet destination.\nIPLookup takes no parameters to instantiate.\nTo add rules to the IPLookup table, use `IPLookup.add()`\n\n__Input Gates__: 1\n__Output Gates__: many (configurable, depending on rule values)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Maximum number of rules (default: 1024)",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "max_rules",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "Maximum number of IP prefixes with smaller than /24 (default: 128)",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "max_tbl8s",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.IPLookupArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 614,
      "longName": "IPLookupArg",
      "name": "IPLookupArg"
    },
    "IPLookupCommandAddArg": {
      "description": "The IPLookup module has a command `add(...)` which takes three paramters.\nThis function accepts the routing rules -- CIDR prefix, CIDR prefix length,\nand what gate to forward matching traffic out on.\nExample use in bessctl: `table.add(prefix='10.0.0.0', prefix_len=8, gate=2)`",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The CIDR IP part of the prefix to match",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "prefix",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "The prefix length",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "prefix_len",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "The number of the gate to forward matching traffic on.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "gate",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.IPLookupCommandAddArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 136,
      "longName": "IPLookupCommandAddArg",
      "name": "IPLookupCommandAddArg"
    },
    "IPLookupCommandClearArg": {
      "description": "The IPLookup module has a command `clear()` which takes no parameters.\nThis function removes all rules in the IPLookup table.\nExample use in bessctl: `myiplookuptable.clear()`",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.IPLookupCommandClearArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 157,
      "longName": "IPLookupCommandClearArg",
      "name": "IPLookupCommandClearArg"
    },
    "IPLookupCommandDeleteArg": {
      "description": "The IPLookup module has a command `delete(...)` which takes two paramters.\nThis function accepts the routing rules -- CIDR prefix, CIDR prefix length,\nExample use in bessctl: `table.delete(prefix='10.0.0.0', prefix_len=8)`",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The CIDR IP part of the prefix to match",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "prefix",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "The prefix length",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "prefix_len",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.IPLookupCommandDeleteArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 147,
      "longName": "IPLookupCommandDeleteArg",
      "name": "IPLookupCommandDeleteArg"
    },
    "L2ForwardArg": {
      "description": "An L2Forward module forwards packets to an output gate according to exact-match rules over\nan Ethernet destination.\nNote that this is _not_ a learning switch -- forwards according to fixed\nroutes specified by `add(..)`.\n\n__Input Gates__: 1\n__Ouput Gates__: many (configurable, depending on rules)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Configures the forwarding hash table -- total number of hash table entries.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "size",
          "type": "int64"
        },
        {
          "defaultValue": "",
          "description": "Configures the forwarding hash table -- total number of slots per hash value.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "bucket",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.L2ForwardArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 628,
      "longName": "L2ForwardArg",
      "name": "L2ForwardArg"
    },
    "L2ForwardCommandAddArg": {
      "description": "The L2Forward module forwards traffic via exact match over the Ethernet\ndestination address. The command `add(...)`  allows you to specifiy a\nMAC address and which gate the L2Forward module should direct it out of.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of L2Forward entries.",
          "fullType": "bess.pb.L2ForwardCommandAddArg.Entry",
          "label": "repeated",
          "longType": "L2ForwardCommandAddArg.Entry",
          "name": "entries",
          "type": "Entry"
        }
      ],
      "fullName": "bess.pb.L2ForwardCommandAddArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 165,
      "longName": "L2ForwardCommandAddArg",
      "name": "L2ForwardCommandAddArg"
    },
    "L2ForwardCommandDeleteArg": {
      "description": "The L2Forward module has a function `delete(...)` to remove a rule\nfrom the MAC forwarding table.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The address to remove from the forwarding table",
          "fullType": "string",
          "label": "repeated",
          "longType": "string",
          "name": "addrs",
          "type": "string"
        }
      ],
      "fullName": "bess.pb.L2ForwardCommandDeleteArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 177,
      "longName": "L2ForwardCommandDeleteArg",
      "name": "L2ForwardCommandDeleteArg"
    },
    "L2ForwardCommandLookupArg": {
      "description": "The L2Forward module has a function `lookup(...)` to query what output gate\na given MAC address will be forwared to; it returns the gate ID number.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The MAC address to query for",
          "fullType": "string",
          "label": "repeated",
          "longType": "string",
          "name": "addrs",
          "type": "string"
        }
      ],
      "fullName": "bess.pb.L2ForwardCommandLookupArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 194,
      "longName": "L2ForwardCommandLookupArg",
      "name": "L2ForwardCommandLookupArg"
    },
    "L2ForwardCommandLookupResponse": {
      "description": "This message type provides the reponse to the L2Forward function `lookup(..)`.\nIt returns the gate that a requested MAC address is currently assigned to.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The gate ID that the requested MAC address maps to",
          "fullType": "uint64",
          "label": "repeated",
          "longType": "uint64",
          "name": "gates",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.L2ForwardCommandLookupResponse",
      "hasExtensions": false,
      "hasFields": true,
      "line": 202,
      "longName": "L2ForwardCommandLookupResponse",
      "name": "L2ForwardCommandLookupResponse"
    },
    "L2ForwardCommandPopulateArg": {
      "description": "The L2Forward module has a command `populate(...)` which allows for fast creation\nof the forwarding table given a range of MAC addresses. The function takes in a\n'base' MAC address, a count (number of MAC addresses), and a gate_id. The module\nwill route all MAC addresses starting from the base address, up to base+count address\nround-robin over gate_count total gates.\nFor example, `populate(base='11:22:33:44:00', count = 10, gate_count = 2) would\nroute addresses 11:22:33:44::(00, 02, 04, 06, 08) out a gate 0 and the odd-suffixed\naddresses out gate 1.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The base MAC address",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "base",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "How many addresses beyond base to populate into the routing table",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "count",
          "type": "int64"
        },
        {
          "defaultValue": "",
          "description": "How many gates to create in the L2Forward module.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "gate_count",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.L2ForwardCommandPopulateArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 216,
      "longName": "L2ForwardCommandPopulateArg",
      "name": "L2ForwardCommandPopulateArg"
    },
    "L2ForwardCommandSetDefaultGateArg": {
      "description": "For traffic reaching the L2Forward module which does not match a MAC rule,\nthe function `set_default_gate(...)` allows you to specify a default gate\nto direct unmatched traffic to.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The default gate to forward traffic which matches no entry to.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "gate",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.L2ForwardCommandSetDefaultGateArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 186,
      "longName": "L2ForwardCommandSetDefaultGateArg",
      "name": "L2ForwardCommandSetDefaultGateArg"
    },
    "MACSwapArg": {
      "description": "The MACSwap module takes no arguments. It swaps the src/destination MAC addresses\nwithin a packet.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.MACSwapArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 640,
      "longName": "MACSwapArg",
      "name": "MACSwapArg"
    },
    "MeasureArg": {
      "description": "The measure module tracks latencies, packets per second, and other statistics.\nIt should be paired with a Timestamp module, which attaches a timestamp to packets.\nThe measure module will log how long (in nanoseconds) it has been for each packet it received since it was timestamped.\nThis module is somewhat experimental and undergoing various changes.\nThere is a test for the the Measure module in [`bessctl/module_tests/timestamp.py`](https://github.com/NetSys/bess/blob/master/bessctl/module_tests/timestamp.py).\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "int64 warmup = 1; /// removed: instead of warmup delay, user should Clear()\n\n/ Where to store the current time within the packet, offset in bytes.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "offset",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "How often the module should sample packets for inter-packet arrival measurements (to measure jitter).",
          "fullType": "double",
          "label": "",
          "longType": "double",
          "name": "jitter_sample_prob",
          "type": "double"
        },
        {
          "defaultValue": "",
          "description": "maximum latency expected, in ns (default 0.1 s)",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "latency_ns_max",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "resolution, in ns (default 100)",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "latency_ns_resolution",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.MeasureArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 653,
      "longName": "MeasureArg",
      "name": "MeasureArg"
    },
    "MeasureCommandGetSummaryArg": {
      "description": "The Measure module measures and collects latency/jitter data for packets\nannotated by a Timestamp module. Note that Timestamp and Measure module must reside\non the server for accurate measurement (as a result, the most typical use case is\nmeasuring roundtrip time).\nOptionally, you can also retrieve percentile values by specifying points in\n\"percentiles\". For example, \"percentiles\" of [50.0, 99.0] will return\n[median, 99'th %-ile tail latency] in \"percentile_values_ns\" in the response.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "if true, the data will be all cleared after read",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "clear",
          "type": "bool"
        },
        {
          "defaultValue": "",
          "description": "ascending list of real numbers in [0.0, 100.0]",
          "fullType": "double",
          "label": "repeated",
          "longType": "double",
          "name": "latency_percentiles",
          "type": "double"
        },
        {
          "defaultValue": "",
          "description": "ascending list of real numbers in [0.0, 100.0]",
          "fullType": "double",
          "label": "repeated",
          "longType": "double",
          "name": "jitter_percentiles",
          "type": "double"
        }
      ],
      "fullName": "bess.pb.MeasureCommandGetSummaryArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 231,
      "longName": "MeasureCommandGetSummaryArg",
      "name": "MeasureCommandGetSummaryArg"
    },
    "MeasureCommandGetSummaryResponse": {
      "description": "The Measure module function `get_summary()` returns the following values.\nNote that the resolution value tells you how grainy the samples are,\ne.g., 100 means that anything from 0-99 ns counts as \"0\",\nanything from 100-199 counts as \"100\", and so on.  The average\nis of samples using this graininess, but (being a result of division)\nmay not be a multiple of the resolution.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Seconds since boot.",
          "fullType": "double",
          "label": "",
          "longType": "double",
          "name": "timestamp",
          "type": "double"
        },
        {
          "defaultValue": "",
          "description": "Total # of packets seen by this module.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "packets",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "Total # of bits seen by this module.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "bits",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.MeasureCommandGetSummaryResponse.Histogram",
          "label": "",
          "longType": "MeasureCommandGetSummaryResponse.Histogram",
          "name": "latency",
          "type": "Histogram"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.MeasureCommandGetSummaryResponse.Histogram",
          "label": "",
          "longType": "MeasureCommandGetSummaryResponse.Histogram",
          "name": "jitter",
          "type": "Histogram"
        }
      ],
      "fullName": "bess.pb.MeasureCommandGetSummaryResponse",
      "hasExtensions": false,
      "hasFields": true,
      "line": 245,
      "longName": "MeasureCommandGetSummaryResponse",
      "name": "MeasureCommandGetSummaryResponse"
    },
    "MergeArg": {
      "description": "The merge module takes no parameters. It has multiple input gates,\nand passes out all packets from a single output gate.\n\n__Input Gates__: many (configurable)\n__Output Gates__: 1",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.MergeArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 668,
      "longName": "MergeArg",
      "name": "MergeArg"
    },
    "MetadataTestArg": {
      "description": "The MetadataTest module is used for internal testing purposes.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.MetadataTestArg.ReadEntry",
          "label": "repeated",
          "longType": "MetadataTestArg.ReadEntry",
          "name": "read",
          "type": "ReadEntry"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.MetadataTestArg.WriteEntry",
          "label": "repeated",
          "longType": "MetadataTestArg.WriteEntry",
          "name": "write",
          "type": "WriteEntry"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.MetadataTestArg.UpdateEntry",
          "label": "repeated",
          "longType": "MetadataTestArg.UpdateEntry",
          "name": "update",
          "type": "UpdateEntry"
        }
      ],
      "fullName": "bess.pb.MetadataTestArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 674,
      "longName": "MetadataTestArg",
      "name": "MetadataTestArg"
    },
    "MplsPopArg": {
      "description": "The MPLS pop module removes MPLS labels\n\n__Input Gates__: 1\n__Output Gates__: 2",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Remove ETH header with the pop",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "remove_eth_header",
          "type": "bool"
        },
        {
          "defaultValue": "",
          "description": "The next ETH type to set",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "next_eth_type",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.MplsPopArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1155,
      "longName": "MplsPopArg",
      "name": "MplsPopArg"
    },
    "NATArg": {
      "description": "The NAT module implements Dynamic IPv4 address/port translation,\nrewriting packet source addresses with external addresses as specified,\nand destination addresses for packets on the reverse direction.\nL3/L4 checksums are updated correspondingly.\nTo see an example of NAT in use, see:\n[`bess/bessctl/conf/samples/nat.bess`](https://github.com/NetSys/bess/blob/master/bessctl/conf/samples/nat.bess)\n\nCurrently only supports TCP/UDP/ICMP.\nNote that address/port in packet payload (e.g., FTP) are NOT translated.\n\n__Input Gates__: 2 (0 for internal->external, and 1 for external->internal direction)\n__Output Gates__: 2 (same as the input gate)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "list of external IP addresses",
          "fullType": "bess.pb.NATArg.ExternalAddress",
          "label": "repeated",
          "longType": "NATArg.ExternalAddress",
          "name": "ext_addrs",
          "type": "ExternalAddress"
        }
      ],
      "fullName": "bess.pb.NATArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 694,
      "longName": "NATArg",
      "name": "NATArg"
    },
    "NoOpArg": {
      "description": "This module is used for testing purposes.",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.NoOpArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 743,
      "longName": "NoOpArg",
      "name": "NoOpArg"
    },
    "PortIncArg": {
      "description": "The PortInc module connects a physical or virtual port and releases\npackets from it. PortInc does not support multiqueueing.\nFor details on how to configure PortInc using DPDK, virtual ports,\nor libpcap, see the sidebar in the wiki.\n\n__Input Gates__: 0\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The portname to connect to.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "port",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "Whether or not to prefetch packets from the port.",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "prefetch",
          "type": "bool"
        }
      ],
      "fullName": "bess.pb.PortIncArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 755,
      "longName": "PortIncArg",
      "name": "PortIncArg"
    },
    "PortIncCommandSetBurstArg": {
      "description": "The module PortInc has a function `set_burst(...)` that allows you to specify the\nmaximum number of packets to be stored in a single PacketBatch released by\nthe module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The maximum \"burst\" of packets (ie, the maximum batch size)",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "burst",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.PortIncCommandSetBurstArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 300,
      "longName": "PortIncCommandSetBurstArg",
      "name": "PortIncCommandSetBurstArg"
    },
    "PortOutArg": {
      "description": "The PortOut module connects to a physical or virtual port and pushes\npackets to it. For details on how to configure PortOut with DPDK,\nvirtual ports, libpcap, etc, see the sidebar in the wiki.\n\n__Input Gates__: 1\n__Output Gates__: 0",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The portname to connect to.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "port",
          "type": "string"
        }
      ],
      "fullName": "bess.pb.PortOutArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 768,
      "longName": "PortOutArg",
      "name": "PortOutArg"
    },
    "PortRange": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "begin",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "end",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "suspended",
          "type": "bool"
        }
      ],
      "fullName": "bess.pb.NATArg.PortRange",
      "hasExtensions": false,
      "hasFields": true,
      "line": 695,
      "longName": "NATArg.PortRange",
      "name": "PortRange"
    },
    "QueueArg": {
      "description": "The Queue module implements a simple packet queue.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The maximum number of packets to store in the queue.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "size",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "When prefetch is enabled, the module will perform CPU prefetch on the first 64B of each packet onto CPU L1 cache. Default value is false.",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "prefetch",
          "type": "bool"
        },
        {
          "defaultValue": "",
          "description": "When backpressure is enabled, the module will notify upstream if it is overloaded.",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "backpressure",
          "type": "bool"
        }
      ],
      "fullName": "bess.pb.QueueArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 807,
      "longName": "QueueArg",
      "name": "QueueArg"
    },
    "QueueCommandGetStatusArg": {
      "description": "Modules that are queues or contain queues may contain functions\n`get_status()` that return QueueCommandGetStatusResponse.",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.QueueCommandGetStatusArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 334,
      "longName": "QueueCommandGetStatusArg",
      "name": "QueueCommandGetStatusArg"
    },
    "QueueCommandGetStatusResponse": {
      "description": "Modules that are queues or contain queues may contain functions\n`get_status()` that take no parameters and returns the queue occupancy and\nsize.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The number of packets currently in the queue.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "count",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "The maximum number of packets the queue can contain.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "size",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "total enqueued",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "enqueued",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "total dequeued",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "dequeued",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "total dropped",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "dropped",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.QueueCommandGetStatusResponse",
      "hasExtensions": false,
      "hasFields": true,
      "line": 341,
      "longName": "QueueCommandGetStatusResponse",
      "name": "QueueCommandGetStatusResponse"
    },
    "QueueCommandSetBurstArg": {
      "description": "The module Queue has a function `set_burst(...)` that allows you to specify\nthe maximum number of packets to be stored in a single PacketBatch released\nby the module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The maximum \"burst\" of packets (ie, the maximum batch size)",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "burst",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.QueueCommandSetBurstArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 318,
      "longName": "QueueCommandSetBurstArg",
      "name": "QueueCommandSetBurstArg"
    },
    "QueueCommandSetSizeArg": {
      "description": "The module Queue has a function `set_size(...)` that allows specifying the\nsize of the queue in total number of packets.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The maximum number of packets to store in the queue.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "size",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.QueueCommandSetSizeArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 326,
      "longName": "QueueCommandSetSizeArg",
      "name": "QueueCommandSetSizeArg"
    },
    "QueueIncArg": {
      "description": "The module QueueInc produces input packets from a physical or virtual port.\nUnlike PortInc, it supports multiqueue ports.\nFor details on how to configure QueueInc with DPDK, virtualports,\nlibpcap, etc, see the sidebar in the wiki.\n\n__Input Gates__: 0\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The portname to connect to (read from).",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "port",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "The queue on that port to read from. qid starts from 0.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "qid",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "When prefetch is enabled, the module will perform CPU prefetch on the first 64B of each packet onto CPU L1 cache. Default value is false.",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "prefetch",
          "type": "bool"
        }
      ],
      "fullName": "bess.pb.QueueIncArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 781,
      "longName": "QueueIncArg",
      "name": "QueueIncArg"
    },
    "QueueIncCommandSetBurstArg": {
      "description": "The module QueueInc has a function `set_burst(...)` that allows you to specify\nthe maximum number of packets to be stored in a single PacketBatch released\nby the module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The maximum \"burst\" of packets (ie, the maximum batch size)",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "burst",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.QueueIncCommandSetBurstArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 309,
      "longName": "QueueIncCommandSetBurstArg",
      "name": "QueueIncCommandSetBurstArg"
    },
    "QueueOutArg": {
      "description": "The QueueOut module releases packets to a physical or virtual port.\nUnlike PortOut, it supports multiqueue ports.\nFor details on how to configure QueueOut with DPDK, virtualports,\nlibpcap, etc, see the sidebar in the wiki.\n\n__Input Gates__: 1\n__Output Gates__: 0",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The portname to connect to.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "port",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "The queue on that port to write out to.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "qid",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.QueueOutArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 796,
      "longName": "QueueOutArg",
      "name": "QueueOutArg"
    },
    "RandomSplitArg": {
      "description": "The RandomSplit module randomly split/drop packets\n\n__InputGates__: 1\n__Output Gates__: many (configurable)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Probability of dropping packet.",
          "fullType": "double",
          "label": "",
          "longType": "double",
          "name": "drop_rate",
          "type": "double"
        },
        {
          "defaultValue": "",
          "description": "A list of gate numbers to split the traffic.",
          "fullType": "int64",
          "label": "repeated",
          "longType": "int64",
          "name": "gates",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.RandomSplitArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 819,
      "longName": "RandomSplitArg",
      "name": "RandomSplitArg"
    },
    "RandomSplitCommandSetDroprateArg": {
      "description": "The RandomSplit module has a function `set_droprate(...)` which specifies\nthe probability of dropping packets",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Probability of dropping packet.",
          "fullType": "double",
          "label": "",
          "longType": "double",
          "name": "drop_rate",
          "type": "double"
        }
      ],
      "fullName": "bess.pb.RandomSplitCommandSetDroprateArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 828,
      "longName": "RandomSplitCommandSetDroprateArg",
      "name": "RandomSplitCommandSetDroprateArg"
    },
    "RandomSplitCommandSetGatesArg": {
      "description": "The RandomSplit module has a function `set_gates(...)` which changes\nthe total number of output gates in the module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of gate numbers to split the traffic.",
          "fullType": "int64",
          "label": "repeated",
          "longType": "int64",
          "name": "gates",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.RandomSplitCommandSetGatesArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 836,
      "longName": "RandomSplitCommandSetGatesArg",
      "name": "RandomSplitCommandSetGatesArg"
    },
    "RandomUpdateArg": {
      "description": "The RandomUpdate module rewrites a specified field (`offset` and `size`) in a packet\nwith a random value between a specified min and max values.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of Random Update Fields.",
          "fullType": "bess.pb.RandomUpdateArg.Field",
          "label": "repeated",
          "longType": "RandomUpdateArg.Field",
          "name": "fields",
          "type": "Field"
        }
      ],
      "fullName": "bess.pb.RandomUpdateArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 847,
      "longName": "RandomUpdateArg",
      "name": "RandomUpdateArg"
    },
    "RandomUpdateCommandClearArg": {
      "description": "The function `clear()` for RandomUpdate takes no parameters and clears all\nstate in the module.",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.RandomUpdateCommandClearArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 353,
      "longName": "RandomUpdateCommandClearArg",
      "name": "RandomUpdateCommandClearArg"
    },
    "ReadEntry": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "value",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.MetadataTestArg.ReadEntry",
      "hasExtensions": false,
      "hasFields": true,
      "longName": "MetadataTestArg.ReadEntry",
      "name": "ReadEntry"
    },
    "ReplicateArg": {
      "description": "The Replicate module makes copies of a packet sending one copy out over each\nof n output gates.\n\n__Input Gates__: 1\n__Output Gates__: many (configurable)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of gate numbers to send packet copies to.",
          "fullType": "int64",
          "label": "repeated",
          "longType": "int64",
          "name": "gates",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.ReplicateArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 908,
      "longName": "ReplicateArg",
      "name": "ReplicateArg"
    },
    "ReplicateCommandSetGatesArg": {
      "description": "The Replicate module has a function `set_gates(...)` which changes\nthe total number of output gates in the module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of gate numbers to replicate the traffic over.",
          "fullType": "int64",
          "label": "repeated",
          "longType": "int64",
          "name": "gates",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.ReplicateCommandSetGatesArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 916,
      "longName": "ReplicateCommandSetGatesArg",
      "name": "ReplicateCommandSetGatesArg"
    },
    "RewriteArg": {
      "description": "The Rewrite module replaces an entire packet body with a packet \"template\"\nconverting all packets that pass through to copies of the of one of\nthe templates.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of bytestrings representing packet templates.",
          "fullType": "bytes",
          "label": "repeated",
          "longType": "bytes",
          "name": "templates",
          "type": "bytes"
        }
      ],
      "fullName": "bess.pb.RewriteArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 869,
      "longName": "RewriteArg",
      "name": "RewriteArg"
    },
    "RewriteCommandClearArg": {
      "description": "The function `clear()` for Rewrite takes no parameters and clears all state\nin the module.",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.RewriteCommandClearArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 360,
      "longName": "RewriteCommandClearArg",
      "name": "RewriteCommandClearArg"
    },
    "RoundRobinArg": {
      "description": "The RoundRobin module splits packets from one input gate across multiple output\ngates.\n\n__Input Gates__: 1\n__Output Gates__: many (configurable)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of gate numbers to split packets across.",
          "fullType": "int64",
          "label": "repeated",
          "longType": "int64",
          "name": "gates",
          "type": "int64"
        },
        {
          "defaultValue": "",
          "description": "Whether to split across gate with every `'packet'` or every `'batch'`.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "mode",
          "type": "string"
        }
      ],
      "fullName": "bess.pb.RoundRobinArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 896,
      "longName": "RoundRobinArg",
      "name": "RoundRobinArg"
    },
    "RoundRobinCommandSetGatesArg": {
      "description": "The RoundRobin module has a function `set_gates(...)` which changes\nthe total number of output gates in the module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of gate numbers to round-robin the traffic over.",
          "fullType": "int64",
          "label": "repeated",
          "longType": "int64",
          "name": "gates",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.RoundRobinCommandSetGatesArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 877,
      "longName": "RoundRobinCommandSetGatesArg",
      "name": "RoundRobinCommandSetGatesArg"
    },
    "RoundRobinCommandSetModeArg": {
      "description": "The RoundRobin module has a function `set_mode(...)` which specifies whether\nto balance traffic across gates per-packet or per-batch.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "whether to perform `'packet'` or `'batch'` round robin partitioning.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "mode",
          "type": "string"
        }
      ],
      "fullName": "bess.pb.RoundRobinCommandSetModeArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 885,
      "longName": "RoundRobinCommandSetModeArg",
      "name": "RoundRobinCommandSetModeArg"
    },
    "Rule": {
      "description": "One ACL rule is represented by the following 6-tuple.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Source IP block in CIDR. Wildcard if \"\".",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "src_ip",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "Destination IP block in CIDR. Wildcard if \"\".",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "dst_ip",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "TCP/UDP source port. Wildcard if 0.",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "src_port",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "TCP/UDP Destination port. Wildcard if 0.",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "dst_port",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "Not implemented",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "established",
          "type": "bool"
        },
        {
          "defaultValue": "",
          "description": "Drop matched packets if true, forward if false. By default ACL drops all traffic.",
          "fullType": "bool",
          "label": "",
          "longType": "bool",
          "name": "drop",
          "type": "bool"
        }
      ],
      "fullName": "bess.pb.ACLArg.Rule",
      "hasExtensions": false,
      "hasFields": true,
      "line": 416,
      "longName": "ACLArg.Rule",
      "name": "Rule"
    },
    "SetMetadataArg": {
      "description": "The SetMetadata module adds metadata attributes to packets, which are not stored\nor sent out with packet data. For examples of SetMetadata use, see\n[`bess/bessctl/conf/attr_match.bess`](https://github.com/NetSys/bess/blob/master/bessctl/conf/metadata/attr_match.bess)\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of attributes to attach to the packet.",
          "fullType": "bess.pb.SetMetadataArg.Attribute",
          "label": "repeated",
          "longType": "SetMetadataArg.Attribute",
          "name": "attrs",
          "type": "Attribute"
        }
      ],
      "fullName": "bess.pb.SetMetadataArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 928,
      "longName": "SetMetadataArg",
      "name": "SetMetadataArg"
    },
    "SinkArg": {
      "description": "The sink module drops all packets that are sent to it.\n\n__Input Gates__: 1\n__Output Gates__: 0",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.SinkArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 955,
      "longName": "SinkArg",
      "name": "SinkArg"
    },
    "SourceArg": {
      "description": "The Source module generates packets with no payload contents.\n\n__Input Gates__: 0\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The size (in bytes) of packet data to produce.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "pkt_size",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.SourceArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 981,
      "longName": "SourceArg",
      "name": "SourceArg"
    },
    "SourceCommandSetBurstArg": {
      "description": "The Source module has a function `set_burst(...)` which\nspecifies the maximum number of packets to release in a single packetbatch\nfrom the module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The maximum number of packets to release in a packetbatch from the module.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "burst",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.SourceCommandSetBurstArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 963,
      "longName": "SourceCommandSetBurstArg",
      "name": "SourceCommandSetBurstArg"
    },
    "SourceCommandSetPktSizeArg": {
      "description": "The Source module has a function `set_pkt_size(...)` which specifies the size\nof packets to be produced by the Source module.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The size (in bytes) of the packets for Source to create.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "pkt_size",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.SourceCommandSetPktSizeArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 971,
      "longName": "SourceCommandSetPktSizeArg",
      "name": "SourceCommandSetPktSizeArg"
    },
    "SplitArg": {
      "description": "The Split module is a basic classifier which directs packets out a gate\nbased on data in the packet (e.g., if the read in value is 3, the packet\nis directed out output gate 3).\n\n__Input Gates__: 1\n__Output Gates__: many (up to 2^(size * 8))",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The size of the value to read in bytes",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "size",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "The name of the metadata field to read.",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "attribute",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "The offset (in bytes) of the data field to read.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "offset",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.SplitArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 993,
      "longName": "SplitArg",
      "name": "SplitArg"
    },
    "StaticNATArg": {
      "description": "Static NAT module implements one-to-one translation of source/destination\nIPv4 addresses. No port number is translated.\nL3/L4 checksums are updated correspondingly.\nTo see an example of NAT in use, see:\n[`bess/bessctl/conf/samples/nat.bess`](https://github.com/NetSys/bess/blob/master/bessctl/conf/samples/nat.bess)\n\nForward direction (from input gate 0 to output gate 0):\n - Source IP address is updated, from internal to external address.\nReverse direction (from input gate 1 to output gate 1):\n - Destination IP address is updated, from external to internal address.\nIf the original address is outside any of the ranges, packets are forwarded\nwithout NAT.\n\nNote that address in packet payload (e.g., FTP) are NOT translated.\n\n__Input Gates__: 2 (0 for internal->external, and 1 for external->internal direction)\n__Output Gates__: 2 (same as the input gate)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.StaticNATArg.AddressRangePair",
          "label": "repeated",
          "longType": "StaticNATArg.AddressRangePair",
          "name": "pairs",
          "type": "AddressRangePair"
        }
      ],
      "fullName": "bess.pb.StaticNATArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 726,
      "longName": "StaticNATArg",
      "name": "StaticNATArg"
    },
    "TimestampArg": {
      "description": "The timestamp module takes an offset parameter. It inserts the current\ntime in nanoseconds into the packet, to be used for latency measurements\nalongside the Measure module.  The default offset is after an IPv4 UDP\nheader.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "offset",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.TimestampArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1010,
      "longName": "TimestampArg",
      "name": "TimestampArg"
    },
    "UpdateArg": {
      "description": "The Update module rewrites a field in a packet's data with a specific value.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of Update Fields.",
          "fullType": "bess.pb.UpdateArg.Field",
          "label": "repeated",
          "longType": "UpdateArg.Field",
          "name": "fields",
          "type": "Field"
        }
      ],
      "fullName": "bess.pb.UpdateArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1020,
      "longName": "UpdateArg",
      "name": "UpdateArg"
    },
    "UpdateCommandClearArg": {
      "description": "The function `clear()` for Update takes no parameters and clears all state in\nthe module.",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.UpdateCommandClearArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 367,
      "longName": "UpdateCommandClearArg",
      "name": "UpdateCommandClearArg"
    },
    "UpdateEntry": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "value",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.MetadataTestArg.UpdateEntry",
      "hasExtensions": false,
      "hasFields": true,
      "longName": "MetadataTestArg.UpdateEntry",
      "name": "UpdateEntry"
    },
    "Url": {
      "description": "A URL consists of a host and a path.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Host field, e.g. \"www.google.com\"",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "host",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "Path prefix, e.g. \"/\"",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "path",
          "type": "string"
        }
      ],
      "fullName": "bess.pb.UrlFilterArg.Url",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1046,
      "longName": "UrlFilterArg.Url",
      "name": "Url"
    },
    "UrlFilterArg": {
      "description": "The URLFilter performs TCP reconstruction over a flow and blocks\nconnections which mention a banned URL.\n\n__Input Gates__: 2\n__Output Gates__: 2\n\nNote that the add() command takes this same argument, and the\nclear() command takes an empty argument.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of Urls to block.",
          "fullType": "bess.pb.UrlFilterArg.Url",
          "label": "repeated",
          "longType": "UrlFilterArg.Url",
          "name": "blacklist",
          "type": "Url"
        }
      ],
      "fullName": "bess.pb.UrlFilterArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1042,
      "longName": "UrlFilterArg",
      "name": "UrlFilterArg"
    },
    "UrlFilterConfig": {
      "description": "The runtime configuration of a URLFilter is the current\nblacklist.  This means that getting the Arg gets an *empty*\nlist: we assume anyone using get_initial_arg is also using\nget_runtime_config.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.UrlFilterArg.Url",
          "label": "repeated",
          "longType": "UrlFilterArg.Url",
          "name": "blacklist",
          "type": "Url"
        }
      ],
      "fullName": "bess.pb.UrlFilterConfig",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1059,
      "longName": "UrlFilterConfig",
      "name": "UrlFilterConfig"
    },
    "VLANPopArg": {
      "description": "VLANPop removes the VLAN tag.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.VLANPopArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 1069,
      "longName": "VLANPopArg",
      "name": "VLANPopArg"
    },
    "VLANPushArg": {
      "description": "VLANPush appends a VLAN tag with a specified TCI value.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The TCI value to insert in the VLAN tag.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "tci",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.VLANPushArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1078,
      "longName": "VLANPushArg",
      "name": "VLANPushArg"
    },
    "VLANSplitArg": {
      "description": "Splits packets across output gates according to VLAN id (e.g., id 3 goes out gate 3).\n\n__Input Gates__: 1\n__Output Gates__: many",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.VLANSplitArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 1088,
      "longName": "VLANSplitArg",
      "name": "VLANSplitArg"
    },
    "VXLANDecapArg": {
      "description": "VXLANDecap module decapsulates a VXLAN header on a packet.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.VXLANDecapArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 1097,
      "longName": "VXLANDecapArg",
      "name": "VXLANDecapArg"
    },
    "VXLANEncapArg": {
      "description": "VXLANEncap module wraps a packet in a VXLAN header with a specified destination port.\n\n__Input Gates__: 1\n__Output Gates__: 1",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The destination UDP port",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "dstport",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.VXLANEncapArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1106,
      "longName": "VXLANEncapArg",
      "name": "VXLANEncapArg"
    },
    "WildcardMatchArg": {
      "description": "The WildcardMatch module matches over multiple fields in a packet and\npushes packets that do match out a specified gate, and those that don't out a default\ngate. WildcardMatch is initialized with the fields it should inspect over,\nrules are added via the `add(...)` function.\nAn example of WildcardMatch is in [`bess/bessctl/conf/samples/wildcardmatch.bess`](https://github.com/NetSys/bess/blob/master/bessctl/conf/samples/wildcardmatch.bess)\n\n__Input Gates__: 1\n__Output Gates__: many (configurable)",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "A list of WildcardMatch fields.",
          "fullType": "bess.pb.Field",
          "label": "repeated",
          "longType": "Field",
          "name": "fields",
          "type": "Field"
        }
      ],
      "fullName": "bess.pb.WildcardMatchArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1120,
      "longName": "WildcardMatchArg",
      "name": "WildcardMatchArg"
    },
    "WildcardMatchCommandAddArg": {
      "description": "The module WildcardMatch has a command `add(...)` which inserts a new rule\ninto the WildcardMatch module. For an example of code using WilcardMatch see\n`bess/bessctl/conf/samples/wildcardmatch.bess`.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "Traffic matching this new rule will be sent to this gate.",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "gate",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "If a packet matches multiple rules, the rule with higher priority will be applied. If priorities are equal behavior is undefined.",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "priority",
          "type": "int64"
        },
        {
          "defaultValue": "",
          "description": "The values to check for in each field.",
          "fullType": "bess.pb.FieldData",
          "label": "repeated",
          "longType": "FieldData",
          "name": "values",
          "type": "FieldData"
        },
        {
          "defaultValue": "",
          "description": "The bitmask for each field -- set `0x0` to ignore the field altogether.",
          "fullType": "bess.pb.FieldData",
          "label": "repeated",
          "longType": "FieldData",
          "name": "masks",
          "type": "FieldData"
        }
      ],
      "fullName": "bess.pb.WildcardMatchCommandAddArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 375,
      "longName": "WildcardMatchCommandAddArg",
      "name": "WildcardMatchCommandAddArg"
    },
    "WildcardMatchCommandClearArg": {
      "description": "The function `clear()` for WildcardMatch takes no parameters, it clears\nall state in the WildcardMatch module (is equivalent to calling delete for all rules)",
      "extensions": [],
      "fields": [],
      "fullName": "bess.pb.WildcardMatchCommandClearArg",
      "hasExtensions": false,
      "hasFields": false,
      "line": 394,
      "longName": "WildcardMatchCommandClearArg",
      "name": "WildcardMatchCommandClearArg"
    },
    "WildcardMatchCommandDeleteArg": {
      "description": "The module WildcardMatch has a command `delete(...)` which removes a rule -- simply specify the values and masks from the previously inserted rule to remove them.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "The values being checked for in the rule",
          "fullType": "bess.pb.FieldData",
          "label": "repeated",
          "longType": "FieldData",
          "name": "values",
          "type": "FieldData"
        },
        {
          "defaultValue": "",
          "description": "The bitmask from the rule.",
          "fullType": "bess.pb.FieldData",
          "label": "repeated",
          "longType": "FieldData",
          "name": "masks",
          "type": "FieldData"
        }
      ],
      "fullName": "bess.pb.WildcardMatchCommandDeleteArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 385,
      "longName": "WildcardMatchCommandDeleteArg",
      "name": "WildcardMatchCommandDeleteArg"
    },
    "WildcardMatchCommandSetDefaultGateArg": {
      "description": "For traffic which does not match any rule in the WildcardMatch module,\nthe `set_default_gate(...)` function specifies which gate to send this extra traffic to.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "gate",
          "type": "uint64"
        }
      ],
      "fullName": "bess.pb.WildcardMatchCommandSetDefaultGateArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 401,
      "longName": "WildcardMatchCommandSetDefaultGateArg",
      "name": "WildcardMatchCommandSetDefaultGateArg"
    },
    "WildcardMatchConfig": {
      "description": "WildcardMatchConfig represents the current runtime configuration\nof a WildcardMatch module, as returned by get_runtime_config and\nset by set_runtime_config.",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint64",
          "label": "",
          "longType": "uint64",
          "name": "default_gate",
          "type": "uint64"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "bess.pb.WildcardMatchCommandAddArg",
          "label": "repeated",
          "longType": "WildcardMatchCommandAddArg",
          "name": "rules",
          "type": "WildcardMatchCommandAddArg"
        }
      ],
      "fullName": "bess.pb.WildcardMatchConfig",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1129,
      "longName": "WildcardMatchConfig",
      "name": "WildcardMatchConfig"
    },
    "WorkerGatesEntry": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "key",
          "type": "uint32"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "uint32",
          "label": "",
          "longType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "fullName": "bess.pb.WorkerSplitArg.WorkerGatesEntry",
      "hasExtensions": false,
      "hasFields": true,
      "longName": "WorkerSplitArg.WorkerGatesEntry",
      "name": "WorkerGatesEntry"
    },
    "WorkerSplitArg": {
      "description": "WorkerSplit splits packets based on the worker calling ProcessBatch(). It has\ntwo modes.\n1) Packets from worker `x` are mapped to output gate `x`. This is the default\n   mode.\n2) When the `worker_gates` field is set, packets from a worker `x` are mapped\n   to `worker_gates[x]`.  In this mode, packet batches from workers not\n   mapped to an output gate will be dropped.\n\nCalling the `reset` command with an empty `worker_gates` field will revert\nWorkerSplit to the default mode.\n\n__Input Gates__: 1\n__Output Gates__: many",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "ogate -> worker mask",
          "fullType": "bess.pb.WorkerSplitArg.WorkerGatesEntry",
          "label": "repeated",
          "longType": "WorkerSplitArg.WorkerGatesEntry",
          "name": "worker_gates",
          "type": "WorkerGatesEntry"
        }
      ],
      "fullName": "bess.pb.WorkerSplitArg",
      "hasExtensions": false,
      "hasFields": true,
      "line": 1175,
      "longName": "WorkerSplitArg",
      "name": "WorkerSplitArg"
    },
    "WriteEntry": {
      "description": "",
      "extensions": [],
      "fields": [
        {
          "defaultValue": "",
          "description": "",
          "fullType": "string",
          "label": "",
          "longType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "defaultValue": "",
          "description": "",
          "fullType": "int64",
          "label": "",
          "longType": "int64",
          "name": "value",
          "type": "int64"
        }
      ],
      "fullName": "bess.pb.MetadataTestArg.WriteEntry",
      "hasExtensions": false,
      "hasFields": true,
      "longName": "MetadataTestArg.WriteEntry",
      "name": "WriteEntry"
    }
  }
}